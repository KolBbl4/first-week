# Списки, кортежи, словари
# Добавь примеры:

# dict.get(), dict.items()

# set.add(), set.intersection()

# Сортировка списка (sorted, reverse)
# Для управления элементами списки имеют целый ряд методов. Некоторые из них:

# append(item): добавляет элемент item в конец списка

# insert(index, item): добавляет элемент item в список по индексу index

# extend(items): добавляет набор элементов items в конец списка

# remove(item): удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError

# clear(): удаление всех элементов из списка

# index(item): возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError

# pop([index]): удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент.

# count(item): возвращает количество вхождений элемента item в список

# sort([key]): сортирует элементы. По умолчанию сортирует по возрастанию. Но с помощью параметра key мы можем передать функцию сортировки.

# reverse(): расставляет все элементы в списке в обратном порядке

# copy(): копирует список

# Кроме того, Python предоставляет ряд встроенных функций для работы со списками:

# len(list): возвращает длину списка

# sorted(list, [key]): возвращает отсортированный список

# min(list): возвращает наименьший элемент списка

# max(list): возвращает наибольший элемент списка
#
list = ['av','bc','a']
pop = list.pop()
list.append("12132132")

users = {
    "11111111": "Tom",
    "33333333": "Bob",
    "55555555": "Alice"
}

get = users.pop("11111111")

set= set()
set.add(123)
set.add("L")

people = [
    ("Tom", 38, "Google"),
    ("Bob", 42, "Microsoft"),
    ("Sam", 29, "JetBrains")
]
 
num1=1
num2=2
num3=3
*numbers,=num1,num2,num3

def fun(*args):
    for arg in args:
        print(arg)
  
fun("Python", "C++", "Java", "C#")


